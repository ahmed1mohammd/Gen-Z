{"ast":null,"code":"// Mock Mode Configuration\n// This file controls whether to use mock data or API calls\n// Set to true to use mock data, false to use API calls\nexport const USE_MOCK_DATA=true;// Mock data configuration\nexport const MOCK_CONFIG={// Simulate API delay (in milliseconds)\nAPI_DELAY:500,// Simulate loading states\nENABLE_LOADING_STATES:true,// Simulate errors (for testing)\nSIMULATE_ERRORS:false,ERROR_RATE:0.1// 10% chance of error\n};// Helper function to simulate API delay\nexport const simulateApiDelay=function(){let ms=arguments.length>0&&arguments[0]!==undefined?arguments[0]:MOCK_CONFIG.API_DELAY;return new Promise(resolve=>setTimeout(resolve,ms));};// Helper function to simulate random errors\nexport const shouldSimulateError=()=>{if(!MOCK_CONFIG.SIMULATE_ERRORS)return false;return Math.random()<MOCK_CONFIG.ERROR_RATE;};// Mock API response wrapper\nexport const mockApiResponse=async function(data){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{delay=MOCK_CONFIG.API_DELAY,shouldError=false}=options;await simulateApiDelay(delay);if(shouldError||shouldSimulateError()){throw new Error('Mock API Error: Simulated error for testing');}return data;};// Environment-based mock mode\nexport const getMockMode=()=>{// Check environment variable first\nif(process.env.REACT_APP_USE_MOCK_DATA!==undefined){return process.env.REACT_APP_USE_MOCK_DATA==='true';}// Fallback to configuration\nreturn USE_MOCK_DATA;};// Check if we should use mock data\nexport const isMockMode=()=>{return getMockMode();};","map":{"version":3,"names":["USE_MOCK_DATA","MOCK_CONFIG","API_DELAY","ENABLE_LOADING_STATES","SIMULATE_ERRORS","ERROR_RATE","simulateApiDelay","ms","arguments","length","undefined","Promise","resolve","setTimeout","shouldSimulateError","Math","random","mockApiResponse","data","options","delay","shouldError","Error","getMockMode","process","env","REACT_APP_USE_MOCK_DATA","isMockMode"],"sources":["C:/Users/asus/OneDrive/Desktop/Gen z/src/config/mockMode.js"],"sourcesContent":["// Mock Mode Configuration\r\n// This file controls whether to use mock data or API calls\r\n\r\n// Set to true to use mock data, false to use API calls\r\nexport const USE_MOCK_DATA = true;\r\n\r\n// Mock data configuration\r\nexport const MOCK_CONFIG = {\r\n  // Simulate API delay (in milliseconds)\r\n  API_DELAY: 500,\r\n  \r\n  // Simulate loading states\r\n  ENABLE_LOADING_STATES: true,\r\n  \r\n  // Simulate errors (for testing)\r\n  SIMULATE_ERRORS: false,\r\n  ERROR_RATE: 0.1, // 10% chance of error\r\n};\r\n\r\n// Helper function to simulate API delay\r\nexport const simulateApiDelay = (ms = MOCK_CONFIG.API_DELAY) => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\n// Helper function to simulate random errors\r\nexport const shouldSimulateError = () => {\r\n  if (!MOCK_CONFIG.SIMULATE_ERRORS) return false;\r\n  return Math.random() < MOCK_CONFIG.ERROR_RATE;\r\n};\r\n\r\n// Mock API response wrapper\r\nexport const mockApiResponse = async (data, options = {}) => {\r\n  const { delay = MOCK_CONFIG.API_DELAY, shouldError = false } = options;\r\n  \r\n  await simulateApiDelay(delay);\r\n  \r\n  if (shouldError || shouldSimulateError()) {\r\n    throw new Error('Mock API Error: Simulated error for testing');\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// Environment-based mock mode\r\nexport const getMockMode = () => {\r\n  // Check environment variable first\r\n  if (process.env.REACT_APP_USE_MOCK_DATA !== undefined) {\r\n    return process.env.REACT_APP_USE_MOCK_DATA === 'true';\r\n  }\r\n  \r\n  // Fallback to configuration\r\n  return USE_MOCK_DATA;\r\n};\r\n\r\n// Check if we should use mock data\r\nexport const isMockMode = () => {\r\n  return getMockMode();\r\n};\r\n"],"mappings":"AAAA;AACA;AAEA;AACA,MAAO,MAAM,CAAAA,aAAa,CAAG,IAAI,CAEjC;AACA,MAAO,MAAM,CAAAC,WAAW,CAAG,CACzB;AACAC,SAAS,CAAE,GAAG,CAEd;AACAC,qBAAqB,CAAE,IAAI,CAE3B;AACAC,eAAe,CAAE,KAAK,CACtBC,UAAU,CAAE,GAAK;AACnB,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAG,QAAAA,CAAA,CAAgC,IAA/B,CAAAC,EAAE,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGP,WAAW,CAACC,SAAS,CACzD,MAAO,IAAI,CAAAS,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAEL,EAAE,CAAC,CAAC,CACxD,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,mBAAmB,CAAGA,CAAA,GAAM,CACvC,GAAI,CAACb,WAAW,CAACG,eAAe,CAAE,MAAO,MAAK,CAC9C,MAAO,CAAAW,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGf,WAAW,CAACI,UAAU,CAC/C,CAAC,CAED;AACA,MAAO,MAAM,CAAAY,eAAe,CAAG,cAAAA,CAAOC,IAAI,CAAmB,IAAjB,CAAAC,OAAO,CAAAX,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACtD,KAAM,CAAEY,KAAK,CAAGnB,WAAW,CAACC,SAAS,CAAEmB,WAAW,CAAG,KAAM,CAAC,CAAGF,OAAO,CAEtE,KAAM,CAAAb,gBAAgB,CAACc,KAAK,CAAC,CAE7B,GAAIC,WAAW,EAAIP,mBAAmB,CAAC,CAAC,CAAE,CACxC,KAAM,IAAI,CAAAQ,KAAK,CAAC,6CAA6C,CAAC,CAChE,CAEA,MAAO,CAAAJ,IAAI,CACb,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,WAAW,CAAGA,CAAA,GAAM,CAC/B;AACA,GAAIC,OAAO,CAACC,GAAG,CAACC,uBAAuB,GAAKhB,SAAS,CAAE,CACrD,MAAO,CAAAc,OAAO,CAACC,GAAG,CAACC,uBAAuB,GAAK,MAAM,CACvD,CAEA;AACA,MAAO,CAAA1B,aAAa,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAA2B,UAAU,CAAGA,CAAA,GAAM,CAC9B,MAAO,CAAAJ,WAAW,CAAC,CAAC,CACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}