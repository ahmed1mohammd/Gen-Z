{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Desktop\\\\Gen z\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useToast } from './ToastContext';\n// API imports for authentication\nimport { loginUser, registerUser, logoutUser, getCurrentUser, updateUserProfile, changePassword, isAuthenticated, getAuthToken, setAuthToken, removeAuthToken, handleApiError } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        loading: false,\n        error: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        loading: false,\n        error: null\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        },\n        loading: false\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, {\n    user: null,\n    token: null,\n    isAuthenticated: false,\n    loading: false,\n    error: null\n  });\n  const {\n    addToast\n  } = useToast();\n\n  // Check authentication status on app load\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  /**\r\n   * Check if user is authenticated and load user data\r\n   * API Call: GET /api/v1/auth/me\r\n   */\n  const checkAuthStatus = async () => {\n    if (!isAuthenticated()) return;\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const userData = await getCurrentUser();\n      const token = getAuthToken();\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: userData,\n          token\n        }\n      });\n    } catch (error) {\n      // Token might be expired, clear it\n      removeAuthToken();\n      dispatch({\n        type: 'LOGOUT'\n      });\n      handleApiError(error, err => {\n        console.log('Auth check failed:', err.message);\n      });\n    }\n  };\n\n  /**\r\n   * User login\r\n   * API Call: POST /api/v1/auth/login\r\n   * @param {Object} credentials - Login credentials (email, password)\r\n   */\n  const login = async credentials => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const response = await loginUser(credentials);\n\n      // Store token in localStorage\n      setAuthToken(response.token);\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: response.user,\n          token: response.token\n        }\n      });\n      addToast('Login successful!', 'success');\n      return response;\n    } catch (error) {\n      handleApiError(error, err => {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: err.message\n        });\n        addToast('Login failed. Please check your credentials.', 'error');\n      });\n      throw error;\n    }\n  };\n\n  /**\r\n   * User registration\r\n   * API Call: POST /api/v1/auth/register\r\n   * @param {Object} userData - User registration data\r\n   */\n  const register = async userData => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const response = await registerUser(userData);\n\n      // Store token in localStorage\n      setAuthToken(response.token);\n      dispatch({\n        type: 'LOGIN_SUCCESS',\n        payload: {\n          user: response.user,\n          token: response.token\n        }\n      });\n      addToast('Registration successful!', 'success');\n      return response;\n    } catch (error) {\n      handleApiError(error, err => {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: err.message\n        });\n        addToast('Registration failed. Please try again.', 'error');\n      });\n      throw error;\n    }\n  };\n\n  /**\r\n   * User logout\r\n   * API Call: POST /api/v1/auth/logout\r\n   */\n  const logout = async () => {\n    try {\n      // Call logout API\n      await logoutUser();\n    } catch (error) {\n      // Even if API call fails, we should still logout locally\n      console.error('Logout API failed:', error);\n    } finally {\n      // Clear token and user data\n      removeAuthToken();\n      dispatch({\n        type: 'LOGOUT'\n      });\n      addToast('Logged out successfully', 'success');\n    }\n  };\n\n  /**\r\n   * Update user profile\r\n   * API Call: PUT /api/v1/auth/profile\r\n   * @param {Object} profileData - Updated profile data\r\n   */\n  const updateProfile = async profileData => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const updatedUser = await updateUserProfile(profileData);\n      dispatch({\n        type: 'UPDATE_USER',\n        payload: updatedUser\n      });\n      addToast('Profile updated successfully!', 'success');\n      return updatedUser;\n    } catch (error) {\n      handleApiError(error, err => {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: err.message\n        });\n        addToast('Failed to update profile', 'error');\n      });\n      throw error;\n    }\n  };\n\n  /**\r\n   * Change user password\r\n   * API Call: PUT /api/v1/auth/change-password\r\n   * @param {Object} passwordData - Password change data\r\n   */\n  const changeUserPassword = async passwordData => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      await changePassword(passwordData);\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      addToast('Password changed successfully!', 'success');\n    } catch (error) {\n      handleApiError(error, err => {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: err.message\n        });\n        addToast('Failed to change password', 'error');\n      });\n      throw error;\n    }\n  };\n\n  /**\r\n   * Clear authentication error\r\n   */\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: state.user,\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      error: state.error,\n      login,\n      register,\n      logout,\n      updateProfile,\n      changePassword: changeUserPassword,\n      clearError,\n      checkAuthStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"vx0bhoseSXYDN/SAglt64YsrvKg=\", false, function () {\n  return [useToast];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useToast","loginUser","registerUser","logoutUser","getCurrentUser","updateUserProfile","changePassword","isAuthenticated","getAuthToken","setAuthToken","removeAuthToken","handleApiError","jsxDEV","_jsxDEV","AuthContext","authReducer","state","action","type","loading","payload","user","token","error","AuthProvider","children","_s","dispatch","addToast","checkAuthStatus","userData","err","console","log","message","login","credentials","response","register","logout","updateProfile","profileData","updatedUser","changeUserPassword","passwordData","clearError","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/asus/OneDrive/Desktop/Gen z/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { useToast } from './ToastContext';\r\n// API imports for authentication\r\nimport { \r\n  loginUser, \r\n  registerUser, \r\n  logoutUser, \r\n  getCurrentUser, \r\n  updateUserProfile,\r\n  changePassword,\r\n  isAuthenticated,\r\n  getAuthToken,\r\n  setAuthToken,\r\n  removeAuthToken,\r\n  handleApiError \r\n} from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return {\r\n        ...state,\r\n        loading: action.payload\r\n      };\r\n    \r\n    case 'LOGIN_SUCCESS':\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    \r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    \r\n    case 'UPDATE_USER':\r\n      return {\r\n        ...state,\r\n        user: { ...state.user, ...action.payload },\r\n        loading: false\r\n      };\r\n    \r\n    case 'SET_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loading: false\r\n      };\r\n    \r\n    case 'CLEAR_ERROR':\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, {\r\n    user: null,\r\n    token: null,\r\n    isAuthenticated: false,\r\n    loading: false,\r\n    error: null\r\n  });\r\n  const { addToast } = useToast();\r\n\r\n  // Check authentication status on app load\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  /**\r\n   * Check if user is authenticated and load user data\r\n   * API Call: GET /api/v1/auth/me\r\n   */\r\n  const checkAuthStatus = async () => {\r\n    if (!isAuthenticated()) return;\r\n\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      \r\n      const userData = await getCurrentUser();\r\n      const token = getAuthToken();\r\n      \r\n      dispatch({ \r\n        type: 'LOGIN_SUCCESS', \r\n        payload: { user: userData, token } \r\n      });\r\n    } catch (error) {\r\n      // Token might be expired, clear it\r\n      removeAuthToken();\r\n      dispatch({ type: 'LOGOUT' });\r\n      \r\n      handleApiError(error, (err) => {\r\n        console.log('Auth check failed:', err.message);\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * User login\r\n   * API Call: POST /api/v1/auth/login\r\n   * @param {Object} credentials - Login credentials (email, password)\r\n   */\r\n  const login = async (credentials) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      dispatch({ type: 'CLEAR_ERROR' });\r\n      \r\n      const response = await loginUser(credentials);\r\n      \r\n      // Store token in localStorage\r\n      setAuthToken(response.token);\r\n      \r\n      dispatch({ \r\n        type: 'LOGIN_SUCCESS', \r\n        payload: { \r\n          user: response.user, \r\n          token: response.token \r\n        } \r\n      });\r\n      \r\n      addToast('Login successful!', 'success');\r\n      return response;\r\n    } catch (error) {\r\n      handleApiError(error, (err) => {\r\n        dispatch({ type: 'SET_ERROR', payload: err.message });\r\n        addToast('Login failed. Please check your credentials.', 'error');\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * User registration\r\n   * API Call: POST /api/v1/auth/register\r\n   * @param {Object} userData - User registration data\r\n   */\r\n  const register = async (userData) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      dispatch({ type: 'CLEAR_ERROR' });\r\n      \r\n      const response = await registerUser(userData);\r\n      \r\n      // Store token in localStorage\r\n      setAuthToken(response.token);\r\n      \r\n      dispatch({ \r\n        type: 'LOGIN_SUCCESS', \r\n        payload: { \r\n          user: response.user, \r\n          token: response.token \r\n        } \r\n      });\r\n      \r\n      addToast('Registration successful!', 'success');\r\n      return response;\r\n    } catch (error) {\r\n      handleApiError(error, (err) => {\r\n        dispatch({ type: 'SET_ERROR', payload: err.message });\r\n        addToast('Registration failed. Please try again.', 'error');\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * User logout\r\n   * API Call: POST /api/v1/auth/logout\r\n   */\r\n  const logout = async () => {\r\n    try {\r\n      // Call logout API\r\n      await logoutUser();\r\n    } catch (error) {\r\n      // Even if API call fails, we should still logout locally\r\n      console.error('Logout API failed:', error);\r\n    } finally {\r\n      // Clear token and user data\r\n      removeAuthToken();\r\n      dispatch({ type: 'LOGOUT' });\r\n      addToast('Logged out successfully', 'success');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Update user profile\r\n   * API Call: PUT /api/v1/auth/profile\r\n   * @param {Object} profileData - Updated profile data\r\n   */\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      \r\n      const updatedUser = await updateUserProfile(profileData);\r\n      \r\n      dispatch({ \r\n        type: 'UPDATE_USER', \r\n        payload: updatedUser \r\n      });\r\n      \r\n      addToast('Profile updated successfully!', 'success');\r\n      return updatedUser;\r\n    } catch (error) {\r\n      handleApiError(error, (err) => {\r\n        dispatch({ type: 'SET_ERROR', payload: err.message });\r\n        addToast('Failed to update profile', 'error');\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Change user password\r\n   * API Call: PUT /api/v1/auth/change-password\r\n   * @param {Object} passwordData - Password change data\r\n   */\r\n  const changeUserPassword = async (passwordData) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      \r\n      await changePassword(passwordData);\r\n      \r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      addToast('Password changed successfully!', 'success');\r\n    } catch (error) {\r\n      handleApiError(error, (err) => {\r\n        dispatch({ type: 'SET_ERROR', payload: err.message });\r\n        addToast('Failed to change password', 'error');\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clear authentication error\r\n   */\r\n  const clearError = () => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      user: state.user,\r\n      token: state.token,\r\n      isAuthenticated: state.isAuthenticated,\r\n      loading: state.loading,\r\n      error: state.error,\r\n      login,\r\n      register,\r\n      logout,\r\n      updateProfile,\r\n      changePassword: changeUserPassword,\r\n      clearError,\r\n      checkAuthStatus\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}