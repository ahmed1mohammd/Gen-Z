{"ast":null,"code":"// API Configuration and Services\n// This file contains all API calls and configurations for the Gen Z e-commerce platform\n\nimport { API_CONFIG, getApiUrl, AUTH_CONFIG } from '../config/environment';\n\n// API Headers configuration\nconst getHeaders = () => ({\n  'Content-Type': 'application/json',\n  'Authorization': `Bearer ${localStorage.getItem(AUTH_CONFIG.TOKEN_KEY)}`,\n  'Accept': 'application/json'\n});\n\n// Generic API request handler\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = getApiUrl(endpoint);\n  const config = {\n    headers: getHeaders(),\n    ...options\n  };\n  try {\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      throw new Error(`API Error: ${response.status} ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API Request failed:', error);\n    throw error;\n  }\n};\n\n// ===========================================\n// PRODUCTS API ENDPOINTS\n// ===========================================\n\n/**\r\n * Get all products with optional filtering\r\n * @param {Object} filters - Filter options (category, price_range, search, etc.)\r\n * @returns {Promise<Array>} Array of products\r\n */\nexport const getProducts = async (filters = {}) => {\n  const queryParams = new URLSearchParams(filters).toString();\n  const endpoint = `/products${queryParams ? `?${queryParams}` : ''}`;\n  return apiRequest(endpoint);\n};\n\n/**\r\n * Get single product by ID\r\n * @param {string|number} productId - Product ID\r\n * @returns {Promise<Object>} Product details\r\n */\nexport const getProductById = async productId => {\n  return apiRequest(`/products/${productId}`);\n};\n\n/**\r\n * Search products by query\r\n * @param {string} query - Search query\r\n * @param {Object} filters - Additional filters\r\n * @returns {Promise<Array>} Search results\r\n */\nexport const searchProducts = async (query, filters = {}) => {\n  const searchParams = {\n    q: query,\n    ...filters\n  };\n  return getProducts(searchParams);\n};\n\n/**\r\n * Get products by category\r\n * @param {string} category - Product category (watches, perfumes)\r\n * @param {Object} filters - Additional filters\r\n * @returns {Promise<Array>} Category products\r\n */\nexport const getProductsByCategory = async (category, filters = {}) => {\n  return getProducts({\n    category,\n    ...filters\n  });\n};\n\n/**\r\n * Get featured/popular products\r\n * @param {number} limit - Number of products to return\r\n * @returns {Promise<Array>} Featured products\r\n */\nexport const getFeaturedProducts = async (limit = 8) => {\n  return apiRequest(`/products/featured?limit=${limit}`);\n};\n\n/**\r\n * Get product reviews\r\n * @param {string|number} productId - Product ID\r\n * @returns {Promise<Array>} Product reviews\r\n */\nexport const getProductReviews = async productId => {\n  return apiRequest(`/products/${productId}/reviews`);\n};\n\n/**\r\n * Add product review\r\n * @param {string|number} productId - Product ID\r\n * @param {Object} reviewData - Review data (rating, comment, etc.)\r\n * @returns {Promise<Object>} Created review\r\n */\nexport const addProductReview = async (productId, reviewData) => {\n  return apiRequest(`/products/${productId}/reviews`, {\n    method: 'POST',\n    body: JSON.stringify(reviewData)\n  });\n};\n\n// ===========================================\n// CART API ENDPOINTS\n// ===========================================\n\n/**\r\n * Get user's cart\r\n * @returns {Promise<Object>} Cart data\r\n */\nexport const getCart = async () => {\n  return apiRequest('/cart');\n};\n\n/**\r\n * Add item to cart\r\n * @param {Object} itemData - Item data (product_id, quantity, etc.)\r\n * @returns {Promise<Object>} Updated cart\r\n */\nexport const addToCart = async itemData => {\n  return apiRequest('/cart/items', {\n    method: 'POST',\n    body: JSON.stringify(itemData)\n  });\n};\n\n/**\r\n * Update cart item quantity\r\n * @param {string|number} itemId - Cart item ID\r\n * @param {number} quantity - New quantity\r\n * @returns {Promise<Object>} Updated cart\r\n */\nexport const updateCartItem = async (itemId, quantity) => {\n  return apiRequest(`/cart/items/${itemId}`, {\n    method: 'PUT',\n    body: JSON.stringify({\n      quantity\n    })\n  });\n};\n\n/**\r\n * Remove item from cart\r\n * @param {string|number} itemId - Cart item ID\r\n * @returns {Promise<Object>} Updated cart\r\n */\nexport const removeFromCart = async itemId => {\n  return apiRequest(`/cart/items/${itemId}`, {\n    method: 'DELETE'\n  });\n};\n\n/**\r\n * Clear entire cart\r\n * @returns {Promise<Object>} Empty cart\r\n */\nexport const clearCart = async () => {\n  return apiRequest('/cart', {\n    method: 'DELETE'\n  });\n};\n\n// ===========================================\n// ORDERS API ENDPOINTS\n// ===========================================\n\n/**\r\n * Get user's orders\r\n * @param {Object} filters - Order filters (status, date_range, etc.)\r\n * @returns {Promise<Array>} User orders\r\n */\nexport const getOrders = async (filters = {}) => {\n  const queryParams = new URLSearchParams(filters).toString();\n  const endpoint = `/orders${queryParams ? `?${queryParams}` : ''}`;\n  return apiRequest(endpoint);\n};\n\n/**\r\n * Get single order by ID\r\n * @param {string|number} orderId - Order ID\r\n * @returns {Promise<Object>} Order details\r\n */\nexport const getOrderById = async orderId => {\n  return apiRequest(`/orders/${orderId}`);\n};\n\n/**\r\n * Create new order\r\n * @param {Object} orderData - Order data (items, shipping_address, etc.)\r\n * @returns {Promise<Object>} Created order\r\n */\nexport const createOrder = async orderData => {\n  return apiRequest('/orders', {\n    method: 'POST',\n    body: JSON.stringify(orderData)\n  });\n};\n\n/**\r\n * Update order status\r\n * @param {string|number} orderId - Order ID\r\n * @param {string} status - New status\r\n * @returns {Promise<Object>} Updated order\r\n */\nexport const updateOrderStatus = async (orderId, status) => {\n  return apiRequest(`/orders/${orderId}/status`, {\n    method: 'PUT',\n    body: JSON.stringify({\n      status\n    })\n  });\n};\n\n// ===========================================\n// USER AUTHENTICATION API ENDPOINTS\n// ===========================================\n\n/**\r\n * User login\r\n * @param {Object} credentials - Login credentials (email, password)\r\n * @returns {Promise<Object>} Auth token and user data\r\n */\nexport const loginUser = async credentials => {\n  return apiRequest('/auth/login', {\n    method: 'POST',\n    body: JSON.stringify(credentials)\n  });\n};\n\n/**\r\n * User registration\r\n * @param {Object} userData - User registration data\r\n * @returns {Promise<Object>} Auth token and user data\r\n */\nexport const registerUser = async userData => {\n  return apiRequest('/auth/register', {\n    method: 'POST',\n    body: JSON.stringify(userData)\n  });\n};\n\n/**\r\n * User logout\r\n * @returns {Promise<Object>} Logout confirmation\r\n */\nexport const logoutUser = async () => {\n  return apiRequest('/auth/logout', {\n    method: 'POST'\n  });\n};\n\n/**\r\n * Get current user profile\r\n * @returns {Promise<Object>} User profile data\r\n */\nexport const getCurrentUser = async () => {\n  return apiRequest('/auth/me');\n};\n\n/**\r\n * Update user profile\r\n * @param {Object} profileData - Updated profile data\r\n * @returns {Promise<Object>} Updated user profile\r\n */\nexport const updateUserProfile = async profileData => {\n  return apiRequest('/auth/profile', {\n    method: 'PUT',\n    body: JSON.stringify(profileData)\n  });\n};\n\n/**\r\n * Change user password\r\n * @param {Object} passwordData - Password change data (current_password, new_password)\r\n * @returns {Promise<Object>} Password change confirmation\r\n */\nexport const changePassword = async passwordData => {\n  return apiRequest('/auth/change-password', {\n    method: 'PUT',\n    body: JSON.stringify(passwordData)\n  });\n};\n\n// ===========================================\n// WISHLIST API ENDPOINTS\n// ===========================================\n\n/**\r\n * Get user's wishlist\r\n * @returns {Promise<Array>} Wishlist items\r\n */\nexport const getWishlist = async () => {\n  return apiRequest('/wishlist');\n};\n\n/**\r\n * Add item to wishlist\r\n * @param {string|number} productId - Product ID\r\n * @returns {Promise<Object>} Added wishlist item\r\n */\nexport const addToWishlist = async productId => {\n  return apiRequest('/wishlist', {\n    method: 'POST',\n    body: JSON.stringify({\n      product_id: productId\n    })\n  });\n};\n\n/**\r\n * Remove item from wishlist\r\n * @param {string|number} productId - Product ID\r\n * @returns {Promise<Object>} Removal confirmation\r\n */\nexport const removeFromWishlist = async productId => {\n  return apiRequest(`/wishlist/${productId}`, {\n    method: 'DELETE'\n  });\n};\n\n// ===========================================\n// PAYMENT API ENDPOINTS\n// ===========================================\n\n/**\r\n * Process payment\r\n * @param {Object} paymentData - Payment data (amount, payment_method, etc.)\r\n * @returns {Promise<Object>} Payment result\r\n */\nexport const processPayment = async paymentData => {\n  return apiRequest('/payments/process', {\n    method: 'POST',\n    body: JSON.stringify(paymentData)\n  });\n};\n\n/**\r\n * Get payment methods\r\n * @returns {Promise<Array>} Available payment methods\r\n */\nexport const getPaymentMethods = async () => {\n  return apiRequest('/payments/methods');\n};\n\n/**\r\n * Get payment history\r\n * @param {Object} filters - Payment filters\r\n * @returns {Promise<Array>} Payment history\r\n */\nexport const getPaymentHistory = async (filters = {}) => {\n  const queryParams = new URLSearchParams(filters).toString();\n  const endpoint = `/payments/history${queryParams ? `?${queryParams}` : ''}`;\n  return apiRequest(endpoint);\n};\n\n// ===========================================\n// NOTIFICATIONS API ENDPOINTS\n// ===========================================\n\n/**\r\n * Get user notifications\r\n * @param {Object} filters - Notification filters\r\n * @returns {Promise<Array>} User notifications\r\n */\nexport const getNotifications = async (filters = {}) => {\n  const queryParams = new URLSearchParams(filters).toString();\n  const endpoint = `/notifications${queryParams ? `?${queryParams}` : ''}`;\n  return apiRequest(endpoint);\n};\n\n/**\r\n * Mark notification as read\r\n * @param {string|number} notificationId - Notification ID\r\n * @returns {Promise<Object>} Update confirmation\r\n */\nexport const markNotificationAsRead = async notificationId => {\n  return apiRequest(`/notifications/${notificationId}/read`, {\n    method: 'PUT'\n  });\n};\n\n/**\r\n * Mark all notifications as read\r\n * @returns {Promise<Object>} Update confirmation\r\n */\nexport const markAllNotificationsAsRead = async () => {\n  return apiRequest('/notifications/read-all', {\n    method: 'PUT'\n  });\n};\n\n// ===========================================\n// ANALYTICS & STATISTICS API ENDPOINTS\n// ===========================================\n\n/**\r\n * Get product analytics\r\n * @param {Object} filters - Analytics filters\r\n * @returns {Promise<Object>} Product analytics data\r\n */\nexport const getProductAnalytics = async (filters = {}) => {\n  const queryParams = new URLSearchParams(filters).toString();\n  const endpoint = `/analytics/products${queryParams ? `?${queryParams}` : ''}`;\n  return apiRequest(endpoint);\n};\n\n/**\r\n * Get sales statistics\r\n * @param {Object} filters - Statistics filters\r\n * @returns {Promise<Object>} Sales statistics\r\n */\nexport const getSalesStatistics = async (filters = {}) => {\n  const queryParams = new URLSearchParams(filters).toString();\n  const endpoint = `/analytics/sales${queryParams ? `?${queryParams}` : ''}`;\n  return apiRequest(endpoint);\n};\n\n// ===========================================\n// UTILITY FUNCTIONS\n// ===========================================\n\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} Authentication status\r\n */\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('authToken');\n};\n\n/**\r\n * Get stored auth token\r\n * @returns {string|null} Auth token\r\n */\nexport const getAuthToken = () => {\n  return localStorage.getItem('authToken');\n};\n\n/**\r\n * Set auth token\r\n * @param {string} token - Auth token\r\n */\nexport const setAuthToken = token => {\n  localStorage.setItem('authToken', token);\n};\n\n/**\r\n * Remove auth token\r\n */\nexport const removeAuthToken = () => {\n  localStorage.removeItem('authToken');\n};\n\n/**\r\n * Handle API errors\r\n * @param {Error} error - API error\r\n * @param {Function} onError - Error callback\r\n */\nexport const handleApiError = (error, onError) => {\n  console.error('API Error:', error);\n  if (onError) {\n    onError(error);\n  }\n\n  // You can add global error handling here\n  // For example: show toast notification, redirect to login, etc.\n};","map":{"version":3,"names":["API_CONFIG","getApiUrl","AUTH_CONFIG","getHeaders","localStorage","getItem","TOKEN_KEY","apiRequest","endpoint","options","url","config","headers","response","fetch","ok","Error","status","statusText","json","error","console","getProducts","filters","queryParams","URLSearchParams","toString","getProductById","productId","searchProducts","query","searchParams","q","getProductsByCategory","category","getFeaturedProducts","limit","getProductReviews","addProductReview","reviewData","method","body","JSON","stringify","getCart","addToCart","itemData","updateCartItem","itemId","quantity","removeFromCart","clearCart","getOrders","getOrderById","orderId","createOrder","orderData","updateOrderStatus","loginUser","credentials","registerUser","userData","logoutUser","getCurrentUser","updateUserProfile","profileData","changePassword","passwordData","getWishlist","addToWishlist","product_id","removeFromWishlist","processPayment","paymentData","getPaymentMethods","getPaymentHistory","getNotifications","markNotificationAsRead","notificationId","markAllNotificationsAsRead","getProductAnalytics","getSalesStatistics","isAuthenticated","getAuthToken","setAuthToken","token","setItem","removeAuthToken","removeItem","handleApiError","onError"],"sources":["C:/Users/asus/OneDrive/Desktop/Gen z/src/services/api.js"],"sourcesContent":["// API Configuration and Services\r\n// This file contains all API calls and configurations for the Gen Z e-commerce platform\r\n\r\nimport { API_CONFIG, getApiUrl, AUTH_CONFIG } from '../config/environment';\r\n\r\n// API Headers configuration\r\nconst getHeaders = () => ({\r\n  'Content-Type': 'application/json',\r\n  'Authorization': `Bearer ${localStorage.getItem(AUTH_CONFIG.TOKEN_KEY)}`,\r\n  'Accept': 'application/json',\r\n});\r\n\r\n// Generic API request handler\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const url = getApiUrl(endpoint);\r\n  \r\n  const config = {\r\n    headers: getHeaders(),\r\n    ...options,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, config);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API Error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('API Request failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// ===========================================\r\n// PRODUCTS API ENDPOINTS\r\n// ===========================================\r\n\r\n/**\r\n * Get all products with optional filtering\r\n * @param {Object} filters - Filter options (category, price_range, search, etc.)\r\n * @returns {Promise<Array>} Array of products\r\n */\r\nexport const getProducts = async (filters = {}) => {\r\n  const queryParams = new URLSearchParams(filters).toString();\r\n  const endpoint = `/products${queryParams ? `?${queryParams}` : ''}`;\r\n  \r\n  return apiRequest(endpoint);\r\n};\r\n\r\n/**\r\n * Get single product by ID\r\n * @param {string|number} productId - Product ID\r\n * @returns {Promise<Object>} Product details\r\n */\r\nexport const getProductById = async (productId) => {\r\n  return apiRequest(`/products/${productId}`);\r\n};\r\n\r\n/**\r\n * Search products by query\r\n * @param {string} query - Search query\r\n * @param {Object} filters - Additional filters\r\n * @returns {Promise<Array>} Search results\r\n */\r\nexport const searchProducts = async (query, filters = {}) => {\r\n  const searchParams = {\r\n    q: query,\r\n    ...filters\r\n  };\r\n  \r\n  return getProducts(searchParams);\r\n};\r\n\r\n/**\r\n * Get products by category\r\n * @param {string} category - Product category (watches, perfumes)\r\n * @param {Object} filters - Additional filters\r\n * @returns {Promise<Array>} Category products\r\n */\r\nexport const getProductsByCategory = async (category, filters = {}) => {\r\n  return getProducts({ category, ...filters });\r\n};\r\n\r\n/**\r\n * Get featured/popular products\r\n * @param {number} limit - Number of products to return\r\n * @returns {Promise<Array>} Featured products\r\n */\r\nexport const getFeaturedProducts = async (limit = 8) => {\r\n  return apiRequest(`/products/featured?limit=${limit}`);\r\n};\r\n\r\n/**\r\n * Get product reviews\r\n * @param {string|number} productId - Product ID\r\n * @returns {Promise<Array>} Product reviews\r\n */\r\nexport const getProductReviews = async (productId) => {\r\n  return apiRequest(`/products/${productId}/reviews`);\r\n};\r\n\r\n/**\r\n * Add product review\r\n * @param {string|number} productId - Product ID\r\n * @param {Object} reviewData - Review data (rating, comment, etc.)\r\n * @returns {Promise<Object>} Created review\r\n */\r\nexport const addProductReview = async (productId, reviewData) => {\r\n  return apiRequest(`/products/${productId}/reviews`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(reviewData),\r\n  });\r\n};\r\n\r\n// ===========================================\r\n// CART API ENDPOINTS\r\n// ===========================================\r\n\r\n/**\r\n * Get user's cart\r\n * @returns {Promise<Object>} Cart data\r\n */\r\nexport const getCart = async () => {\r\n  return apiRequest('/cart');\r\n};\r\n\r\n/**\r\n * Add item to cart\r\n * @param {Object} itemData - Item data (product_id, quantity, etc.)\r\n * @returns {Promise<Object>} Updated cart\r\n */\r\nexport const addToCart = async (itemData) => {\r\n  return apiRequest('/cart/items', {\r\n    method: 'POST',\r\n    body: JSON.stringify(itemData),\r\n  });\r\n};\r\n\r\n/**\r\n * Update cart item quantity\r\n * @param {string|number} itemId - Cart item ID\r\n * @param {number} quantity - New quantity\r\n * @returns {Promise<Object>} Updated cart\r\n */\r\nexport const updateCartItem = async (itemId, quantity) => {\r\n  return apiRequest(`/cart/items/${itemId}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify({ quantity }),\r\n  });\r\n};\r\n\r\n/**\r\n * Remove item from cart\r\n * @param {string|number} itemId - Cart item ID\r\n * @returns {Promise<Object>} Updated cart\r\n */\r\nexport const removeFromCart = async (itemId) => {\r\n  return apiRequest(`/cart/items/${itemId}`, {\r\n    method: 'DELETE',\r\n  });\r\n};\r\n\r\n/**\r\n * Clear entire cart\r\n * @returns {Promise<Object>} Empty cart\r\n */\r\nexport const clearCart = async () => {\r\n  return apiRequest('/cart', {\r\n    method: 'DELETE',\r\n  });\r\n};\r\n\r\n// ===========================================\r\n// ORDERS API ENDPOINTS\r\n// ===========================================\r\n\r\n/**\r\n * Get user's orders\r\n * @param {Object} filters - Order filters (status, date_range, etc.)\r\n * @returns {Promise<Array>} User orders\r\n */\r\nexport const getOrders = async (filters = {}) => {\r\n  const queryParams = new URLSearchParams(filters).toString();\r\n  const endpoint = `/orders${queryParams ? `?${queryParams}` : ''}`;\r\n  \r\n  return apiRequest(endpoint);\r\n};\r\n\r\n/**\r\n * Get single order by ID\r\n * @param {string|number} orderId - Order ID\r\n * @returns {Promise<Object>} Order details\r\n */\r\nexport const getOrderById = async (orderId) => {\r\n  return apiRequest(`/orders/${orderId}`);\r\n};\r\n\r\n/**\r\n * Create new order\r\n * @param {Object} orderData - Order data (items, shipping_address, etc.)\r\n * @returns {Promise<Object>} Created order\r\n */\r\nexport const createOrder = async (orderData) => {\r\n  return apiRequest('/orders', {\r\n    method: 'POST',\r\n    body: JSON.stringify(orderData),\r\n  });\r\n};\r\n\r\n/**\r\n * Update order status\r\n * @param {string|number} orderId - Order ID\r\n * @param {string} status - New status\r\n * @returns {Promise<Object>} Updated order\r\n */\r\nexport const updateOrderStatus = async (orderId, status) => {\r\n  return apiRequest(`/orders/${orderId}/status`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify({ status }),\r\n  });\r\n};\r\n\r\n// ===========================================\r\n// USER AUTHENTICATION API ENDPOINTS\r\n// ===========================================\r\n\r\n/**\r\n * User login\r\n * @param {Object} credentials - Login credentials (email, password)\r\n * @returns {Promise<Object>} Auth token and user data\r\n */\r\nexport const loginUser = async (credentials) => {\r\n  return apiRequest('/auth/login', {\r\n    method: 'POST',\r\n    body: JSON.stringify(credentials),\r\n  });\r\n};\r\n\r\n/**\r\n * User registration\r\n * @param {Object} userData - User registration data\r\n * @returns {Promise<Object>} Auth token and user data\r\n */\r\nexport const registerUser = async (userData) => {\r\n  return apiRequest('/auth/register', {\r\n    method: 'POST',\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n/**\r\n * User logout\r\n * @returns {Promise<Object>} Logout confirmation\r\n */\r\nexport const logoutUser = async () => {\r\n  return apiRequest('/auth/logout', {\r\n    method: 'POST',\r\n  });\r\n};\r\n\r\n/**\r\n * Get current user profile\r\n * @returns {Promise<Object>} User profile data\r\n */\r\nexport const getCurrentUser = async () => {\r\n  return apiRequest('/auth/me');\r\n};\r\n\r\n/**\r\n * Update user profile\r\n * @param {Object} profileData - Updated profile data\r\n * @returns {Promise<Object>} Updated user profile\r\n */\r\nexport const updateUserProfile = async (profileData) => {\r\n  return apiRequest('/auth/profile', {\r\n    method: 'PUT',\r\n    body: JSON.stringify(profileData),\r\n  });\r\n};\r\n\r\n/**\r\n * Change user password\r\n * @param {Object} passwordData - Password change data (current_password, new_password)\r\n * @returns {Promise<Object>} Password change confirmation\r\n */\r\nexport const changePassword = async (passwordData) => {\r\n  return apiRequest('/auth/change-password', {\r\n    method: 'PUT',\r\n    body: JSON.stringify(passwordData),\r\n  });\r\n};\r\n\r\n// ===========================================\r\n// WISHLIST API ENDPOINTS\r\n// ===========================================\r\n\r\n/**\r\n * Get user's wishlist\r\n * @returns {Promise<Array>} Wishlist items\r\n */\r\nexport const getWishlist = async () => {\r\n  return apiRequest('/wishlist');\r\n};\r\n\r\n/**\r\n * Add item to wishlist\r\n * @param {string|number} productId - Product ID\r\n * @returns {Promise<Object>} Added wishlist item\r\n */\r\nexport const addToWishlist = async (productId) => {\r\n  return apiRequest('/wishlist', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ product_id: productId }),\r\n  });\r\n};\r\n\r\n/**\r\n * Remove item from wishlist\r\n * @param {string|number} productId - Product ID\r\n * @returns {Promise<Object>} Removal confirmation\r\n */\r\nexport const removeFromWishlist = async (productId) => {\r\n  return apiRequest(`/wishlist/${productId}`, {\r\n    method: 'DELETE',\r\n  });\r\n};\r\n\r\n// ===========================================\r\n// PAYMENT API ENDPOINTS\r\n// ===========================================\r\n\r\n/**\r\n * Process payment\r\n * @param {Object} paymentData - Payment data (amount, payment_method, etc.)\r\n * @returns {Promise<Object>} Payment result\r\n */\r\nexport const processPayment = async (paymentData) => {\r\n  return apiRequest('/payments/process', {\r\n    method: 'POST',\r\n    body: JSON.stringify(paymentData),\r\n  });\r\n};\r\n\r\n/**\r\n * Get payment methods\r\n * @returns {Promise<Array>} Available payment methods\r\n */\r\nexport const getPaymentMethods = async () => {\r\n  return apiRequest('/payments/methods');\r\n};\r\n\r\n/**\r\n * Get payment history\r\n * @param {Object} filters - Payment filters\r\n * @returns {Promise<Array>} Payment history\r\n */\r\nexport const getPaymentHistory = async (filters = {}) => {\r\n  const queryParams = new URLSearchParams(filters).toString();\r\n  const endpoint = `/payments/history${queryParams ? `?${queryParams}` : ''}`;\r\n  \r\n  return apiRequest(endpoint);\r\n};\r\n\r\n// ===========================================\r\n// NOTIFICATIONS API ENDPOINTS\r\n// ===========================================\r\n\r\n/**\r\n * Get user notifications\r\n * @param {Object} filters - Notification filters\r\n * @returns {Promise<Array>} User notifications\r\n */\r\nexport const getNotifications = async (filters = {}) => {\r\n  const queryParams = new URLSearchParams(filters).toString();\r\n  const endpoint = `/notifications${queryParams ? `?${queryParams}` : ''}`;\r\n  \r\n  return apiRequest(endpoint);\r\n};\r\n\r\n/**\r\n * Mark notification as read\r\n * @param {string|number} notificationId - Notification ID\r\n * @returns {Promise<Object>} Update confirmation\r\n */\r\nexport const markNotificationAsRead = async (notificationId) => {\r\n  return apiRequest(`/notifications/${notificationId}/read`, {\r\n    method: 'PUT',\r\n  });\r\n};\r\n\r\n/**\r\n * Mark all notifications as read\r\n * @returns {Promise<Object>} Update confirmation\r\n */\r\nexport const markAllNotificationsAsRead = async () => {\r\n  return apiRequest('/notifications/read-all', {\r\n    method: 'PUT',\r\n  });\r\n};\r\n\r\n// ===========================================\r\n// ANALYTICS & STATISTICS API ENDPOINTS\r\n// ===========================================\r\n\r\n/**\r\n * Get product analytics\r\n * @param {Object} filters - Analytics filters\r\n * @returns {Promise<Object>} Product analytics data\r\n */\r\nexport const getProductAnalytics = async (filters = {}) => {\r\n  const queryParams = new URLSearchParams(filters).toString();\r\n  const endpoint = `/analytics/products${queryParams ? `?${queryParams}` : ''}`;\r\n  \r\n  return apiRequest(endpoint);\r\n};\r\n\r\n/**\r\n * Get sales statistics\r\n * @param {Object} filters - Statistics filters\r\n * @returns {Promise<Object>} Sales statistics\r\n */\r\nexport const getSalesStatistics = async (filters = {}) => {\r\n  const queryParams = new URLSearchParams(filters).toString();\r\n  const endpoint = `/analytics/sales${queryParams ? `?${queryParams}` : ''}`;\r\n  \r\n  return apiRequest(endpoint);\r\n};\r\n\r\n// ===========================================\r\n// UTILITY FUNCTIONS\r\n// ===========================================\r\n\r\n/**\r\n * Check if user is authenticated\r\n * @returns {boolean} Authentication status\r\n */\r\nexport const isAuthenticated = () => {\r\n  return !!localStorage.getItem('authToken');\r\n};\r\n\r\n/**\r\n * Get stored auth token\r\n * @returns {string|null} Auth token\r\n */\r\nexport const getAuthToken = () => {\r\n  return localStorage.getItem('authToken');\r\n};\r\n\r\n/**\r\n * Set auth token\r\n * @param {string} token - Auth token\r\n */\r\nexport const setAuthToken = (token) => {\r\n  localStorage.setItem('authToken', token);\r\n};\r\n\r\n/**\r\n * Remove auth token\r\n */\r\nexport const removeAuthToken = () => {\r\n  localStorage.removeItem('authToken');\r\n};\r\n\r\n/**\r\n * Handle API errors\r\n * @param {Error} error - API error\r\n * @param {Function} onError - Error callback\r\n */\r\nexport const handleApiError = (error, onError) => {\r\n  console.error('API Error:', error);\r\n  \r\n  if (onError) {\r\n    onError(error);\r\n  }\r\n  \r\n  // You can add global error handling here\r\n  // For example: show toast notification, redirect to login, etc.\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}