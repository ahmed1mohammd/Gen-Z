{"ast":null,"code":"// Mock API Service\n// This file provides mock implementations of API calls for development\n\nimport { products } from '../data/products';\nimport { mockApiResponse, MOCK_CONFIG } from '../config/mockMode';\n\n// Mock user data\nconst mockUsers = [{\n  id: 1,\n  email: 'user@example.com',\n  name: 'John Doe',\n  avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',\n  created_at: '2024-01-01T00:00:00Z'\n}];\n\n// Mock cart data\nlet mockCart = {\n  items: [],\n  total: 0,\n  item_count: 0\n};\n\n// Mock orders data\nlet mockOrders = [{\n  id: 1,\n  user_id: 1,\n  status: 'completed',\n  total: 95,\n  items: [{\n    product_id: 3,\n    quantity: 1,\n    price: 95,\n    name: 'Fossil Grant'\n  }],\n  shipping_address: {\n    street: '123 Main St',\n    city: 'New York',\n    state: 'NY',\n    zip: '10001',\n    country: 'USA'\n  },\n  created_at: '2024-01-15T10:30:00Z',\n  updated_at: '2024-01-15T10:30:00Z'\n}];\n\n// Mock wishlist data\nlet mockWishlist = [{\n  id: 1,\n  product_id: 1,\n  user_id: 1,\n  created_at: '2024-01-01T00:00:00Z'\n}, {\n  id: 2,\n  product_id: 4,\n  user_id: 1,\n  created_at: '2024-01-02T00:00:00Z'\n}];\n\n// Mock notifications data\nlet mockNotifications = [{\n  id: 1,\n  user_id: 1,\n  title: 'Welcome to Gen Z Store!',\n  message: 'Thank you for joining our premium collection.',\n  type: 'welcome',\n  read: false,\n  created_at: '2024-01-01T00:00:00Z'\n}, {\n  id: 2,\n  user_id: 1,\n  title: 'Order Shipped',\n  message: 'Your order #1 has been shipped and is on its way.',\n  type: 'order',\n  read: false,\n  created_at: '2024-01-16T09:00:00Z'\n}];\n\n// ===========================================\n// MOCK PRODUCTS API\n// ===========================================\n\nexport const mockGetProducts = async (filters = {}) => {\n  let filteredProducts = [...products];\n\n  // Apply filters\n  if (filters.category && filters.category !== 'all') {\n    filteredProducts = filteredProducts.filter(p => p.category === filters.category);\n  }\n  if (filters.search) {\n    const searchTerm = filters.search.toLowerCase();\n    filteredProducts = filteredProducts.filter(p => p.name.toLowerCase().includes(searchTerm) || p.description.toLowerCase().includes(searchTerm));\n  }\n  if (filters.price_min) {\n    filteredProducts = filteredProducts.filter(p => p.price >= filters.price_min);\n  }\n  if (filters.price_max) {\n    filteredProducts = filteredProducts.filter(p => p.price <= filters.price_max);\n  }\n  return mockApiResponse({\n    products: filteredProducts,\n    total: filteredProducts.length,\n    page: 1,\n    limit: 20\n  });\n};\nexport const mockGetProductById = async productId => {\n  const product = products.find(p => p.id === parseInt(productId));\n  if (!product) {\n    throw new Error('Product not found');\n  }\n  return mockApiResponse(product);\n};\nexport const mockGetFeaturedProducts = async (limit = 8) => {\n  const featured = products.slice(0, limit);\n  return mockApiResponse(featured);\n};\nexport const mockGetProductReviews = async productId => {\n  const reviews = [{\n    id: 1,\n    product_id: parseInt(productId),\n    user_id: 1,\n    rating: 5,\n    comment: 'Excellent product! Highly recommended.',\n    created_at: '2024-01-10T00:00:00Z'\n  }, {\n    id: 2,\n    product_id: parseInt(productId),\n    user_id: 2,\n    rating: 4,\n    comment: 'Good quality, fast shipping.',\n    created_at: '2024-01-12T00:00:00Z'\n  }];\n  return mockApiResponse(reviews);\n};\nexport const mockAddProductReview = async (productId, reviewData) => {\n  const newReview = {\n    id: Date.now(),\n    product_id: parseInt(productId),\n    user_id: 1,\n    ...reviewData,\n    created_at: new Date().toISOString()\n  };\n  return mockApiResponse(newReview);\n};\n\n// ===========================================\n// MOCK CART API\n// ===========================================\n\nexport const mockGetCart = async () => {\n  return mockApiResponse(mockCart);\n};\nexport const mockAddToCart = async itemData => {\n  const existingItem = mockCart.items.find(item => item.product_id === itemData.product_id);\n  if (existingItem) {\n    existingItem.quantity += itemData.quantity || 1;\n  } else {\n    const product = products.find(p => p.id === itemData.product_id);\n    mockCart.items.push({\n      id: Date.now(),\n      product_id: itemData.product_id,\n      quantity: itemData.quantity || 1,\n      price: itemData.price || (product === null || product === void 0 ? void 0 : product.price) || 0,\n      name: (product === null || product === void 0 ? void 0 : product.name) || 'Unknown Product'\n    });\n  }\n\n  // Update totals\n  mockCart.item_count = mockCart.items.reduce((sum, item) => sum + item.quantity, 0);\n  mockCart.total = mockCart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  return mockApiResponse(mockCart);\n};\nexport const mockUpdateCartItem = async (itemId, quantity) => {\n  const item = mockCart.items.find(item => item.id === parseInt(itemId));\n  if (!item) {\n    throw new Error('Cart item not found');\n  }\n  item.quantity = quantity;\n\n  // Update totals\n  mockCart.item_count = mockCart.items.reduce((sum, item) => sum + item.quantity, 0);\n  mockCart.total = mockCart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  return mockApiResponse(mockCart);\n};\nexport const mockRemoveFromCart = async itemId => {\n  mockCart.items = mockCart.items.filter(item => item.id !== parseInt(itemId));\n\n  // Update totals\n  mockCart.item_count = mockCart.items.reduce((sum, item) => sum + item.quantity, 0);\n  mockCart.total = mockCart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);\n  return mockApiResponse(mockCart);\n};\nexport const mockClearCart = async () => {\n  mockCart = {\n    items: [],\n    total: 0,\n    item_count: 0\n  };\n  return mockApiResponse(mockCart);\n};\n\n// ===========================================\n// MOCK AUTH API\n// ===========================================\n\nexport const mockLoginUser = async credentials => {\n  const user = mockUsers.find(u => u.email === credentials.email);\n  if (!user || credentials.password !== 'password') {\n    throw new Error('Invalid credentials');\n  }\n  const token = 'mock-jwt-token-' + Date.now();\n  return mockApiResponse({\n    user,\n    token,\n    expires_in: 86400\n  });\n};\nexport const mockRegisterUser = async userData => {\n  const newUser = {\n    id: Date.now(),\n    ...userData,\n    created_at: new Date().toISOString()\n  };\n  mockUsers.push(newUser);\n  const token = 'mock-jwt-token-' + Date.now();\n  return mockApiResponse({\n    user: newUser,\n    token,\n    expires_in: 86400\n  });\n};\nexport const mockLogoutUser = async () => {\n  return mockApiResponse({\n    message: 'Logged out successfully'\n  });\n};\nexport const mockGetCurrentUser = async () => {\n  return mockApiResponse(mockUsers[0]);\n};\nexport const mockUpdateUserProfile = async profileData => {\n  const updatedUser = {\n    ...mockUsers[0],\n    ...profileData\n  };\n  mockUsers[0] = updatedUser;\n  return mockApiResponse(updatedUser);\n};\nexport const mockChangePassword = async passwordData => {\n  return mockApiResponse({\n    message: 'Password changed successfully'\n  });\n};\n\n// ===========================================\n// MOCK ORDERS API\n// ===========================================\n\nexport const mockGetOrders = async (filters = {}) => {\n  let filteredOrders = [...mockOrders];\n  if (filters.status) {\n    filteredOrders = filteredOrders.filter(order => order.status === filters.status);\n  }\n  return mockApiResponse(filteredOrders);\n};\nexport const mockGetOrderById = async orderId => {\n  const order = mockOrders.find(o => o.id === parseInt(orderId));\n  if (!order) {\n    throw new Error('Order not found');\n  }\n  return mockApiResponse(order);\n};\nexport const mockCreateOrder = async orderData => {\n  const newOrder = {\n    id: Date.now(),\n    user_id: 1,\n    status: 'pending',\n    ...orderData,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString()\n  };\n  mockOrders.push(newOrder);\n\n  // Clear cart after order creation\n  mockCart = {\n    items: [],\n    total: 0,\n    item_count: 0\n  };\n  return mockApiResponse(newOrder);\n};\nexport const mockUpdateOrderStatus = async (orderId, status) => {\n  const order = mockOrders.find(o => o.id === parseInt(orderId));\n  if (!order) {\n    throw new Error('Order not found');\n  }\n  order.status = status;\n  order.updated_at = new Date().toISOString();\n  return mockApiResponse(order);\n};\n\n// ===========================================\n// MOCK WISHLIST API\n// ===========================================\n\nexport const mockGetWishlist = async () => {\n  const wishlistItems = mockWishlist.map(item => {\n    const product = products.find(p => p.id === item.product_id);\n    return {\n      ...item,\n      product: product || null\n    };\n  });\n  return mockApiResponse(wishlistItems);\n};\nexport const mockAddToWishlist = async productId => {\n  const existingItem = mockWishlist.find(item => item.product_id === parseInt(productId));\n  if (existingItem) {\n    return mockApiResponse(existingItem);\n  }\n  const newItem = {\n    id: Date.now(),\n    product_id: parseInt(productId),\n    user_id: 1,\n    created_at: new Date().toISOString()\n  };\n  mockWishlist.push(newItem);\n  return mockApiResponse(newItem);\n};\nexport const mockRemoveFromWishlist = async productId => {\n  mockWishlist = mockWishlist.filter(item => item.product_id !== parseInt(productId));\n  return mockApiResponse({\n    message: 'Item removed from wishlist'\n  });\n};\n\n// ===========================================\n// MOCK NOTIFICATIONS API\n// ===========================================\n\nexport const mockGetNotifications = async (filters = {}) => {\n  let filteredNotifications = [...mockNotifications];\n  if (filters.unread_only) {\n    filteredNotifications = filteredNotifications.filter(n => !n.read);\n  }\n  return mockApiResponse(filteredNotifications);\n};\nexport const mockMarkNotificationAsRead = async notificationId => {\n  const notification = mockNotifications.find(n => n.id === parseInt(notificationId));\n  if (notification) {\n    notification.read = true;\n  }\n  return mockApiResponse(notification);\n};\nexport const mockMarkAllNotificationsAsRead = async () => {\n  mockNotifications.forEach(notification => {\n    notification.read = true;\n  });\n  return mockApiResponse({\n    message: 'All notifications marked as read'\n  });\n};\n\n// ===========================================\n// MOCK PAYMENTS API\n// ===========================================\n\nexport const mockProcessPayment = async paymentData => {\n  const paymentResult = {\n    id: 'mock-payment-' + Date.now(),\n    status: 'succeeded',\n    amount: paymentData.amount,\n    currency: 'USD',\n    payment_method: paymentData.payment_method,\n    created_at: new Date().toISOString()\n  };\n  return mockApiResponse(paymentResult);\n};\nexport const mockGetPaymentMethods = async () => {\n  const methods = [{\n    id: 'card',\n    name: 'Credit Card',\n    type: 'card'\n  }, {\n    id: 'paypal',\n    name: 'PayPal',\n    type: 'paypal'\n  }, {\n    id: 'apple_pay',\n    name: 'Apple Pay',\n    type: 'wallet'\n  }];\n  return mockApiResponse(methods);\n};\nexport const mockGetPaymentHistory = async (filters = {}) => {\n  const payments = [{\n    id: 'mock-payment-1',\n    amount: 95,\n    currency: 'USD',\n    status: 'succeeded',\n    payment_method: 'card',\n    created_at: '2024-01-15T10:30:00Z'\n  }];\n  return mockApiResponse(payments);\n};\n\n// ===========================================\n// MOCK ANALYTICS API\n// ===========================================\n\nexport const mockGetProductAnalytics = async (filters = {}) => {\n  const analytics = {\n    total_products: products.length,\n    total_views: 1250,\n    total_sales: 45,\n    revenue: 12500,\n    top_products: products.slice(0, 5).map(p => ({\n      id: p.id,\n      name: p.name,\n      views: Math.floor(Math.random() * 100),\n      sales: Math.floor(Math.random() * 20)\n    }))\n  };\n  return mockApiResponse(analytics);\n};\nexport const mockGetSalesStatistics = async (filters = {}) => {\n  const statistics = {\n    total_orders: mockOrders.length,\n    total_revenue: mockOrders.reduce((sum, order) => sum + order.total, 0),\n    average_order_value: mockOrders.reduce((sum, order) => sum + order.total, 0) / mockOrders.length,\n    orders_by_status: {\n      pending: mockOrders.filter(o => o.status === 'pending').length,\n      completed: mockOrders.filter(o => o.status === 'completed').length,\n      cancelled: mockOrders.filter(o => o.status === 'cancelled').length\n    }\n  };\n  return mockApiResponse(statistics);\n};","map":{"version":3,"names":["products","mockApiResponse","MOCK_CONFIG","mockUsers","id","email","name","avatar","created_at","mockCart","items","total","item_count","mockOrders","user_id","status","product_id","quantity","price","shipping_address","street","city","state","zip","country","updated_at","mockWishlist","mockNotifications","title","message","type","read","mockGetProducts","filters","filteredProducts","category","filter","p","search","searchTerm","toLowerCase","includes","description","price_min","price_max","length","page","limit","mockGetProductById","productId","product","find","parseInt","Error","mockGetFeaturedProducts","featured","slice","mockGetProductReviews","reviews","rating","comment","mockAddProductReview","reviewData","newReview","Date","now","toISOString","mockGetCart","mockAddToCart","itemData","existingItem","item","push","reduce","sum","mockUpdateCartItem","itemId","mockRemoveFromCart","mockClearCart","mockLoginUser","credentials","user","u","password","token","expires_in","mockRegisterUser","userData","newUser","mockLogoutUser","mockGetCurrentUser","mockUpdateUserProfile","profileData","updatedUser","mockChangePassword","passwordData","mockGetOrders","filteredOrders","order","mockGetOrderById","orderId","o","mockCreateOrder","orderData","newOrder","mockUpdateOrderStatus","mockGetWishlist","wishlistItems","map","mockAddToWishlist","newItem","mockRemoveFromWishlist","mockGetNotifications","filteredNotifications","unread_only","n","mockMarkNotificationAsRead","notificationId","notification","mockMarkAllNotificationsAsRead","forEach","mockProcessPayment","paymentData","paymentResult","amount","currency","payment_method","mockGetPaymentMethods","methods","mockGetPaymentHistory","payments","mockGetProductAnalytics","analytics","total_products","total_views","total_sales","revenue","top_products","views","Math","floor","random","sales","mockGetSalesStatistics","statistics","total_orders","total_revenue","average_order_value","orders_by_status","pending","completed","cancelled"],"sources":["C:/Users/asus/OneDrive/Desktop/Gen z/src/services/mockApi.js"],"sourcesContent":["// Mock API Service\r\n// This file provides mock implementations of API calls for development\r\n\r\nimport { products } from '../data/products';\r\nimport { mockApiResponse, MOCK_CONFIG } from '../config/mockMode';\r\n\r\n// Mock user data\r\nconst mockUsers = [\r\n  {\r\n    id: 1,\r\n    email: 'user@example.com',\r\n    name: 'John Doe',\r\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',\r\n    created_at: '2024-01-01T00:00:00Z'\r\n  }\r\n];\r\n\r\n// Mock cart data\r\nlet mockCart = {\r\n  items: [],\r\n  total: 0,\r\n  item_count: 0\r\n};\r\n\r\n// Mock orders data\r\nlet mockOrders = [\r\n  {\r\n    id: 1,\r\n    user_id: 1,\r\n    status: 'completed',\r\n    total: 95,\r\n    items: [\r\n      { product_id: 3, quantity: 1, price: 95, name: 'Fossil Grant' }\r\n    ],\r\n    shipping_address: {\r\n      street: '123 Main St',\r\n      city: 'New York',\r\n      state: 'NY',\r\n      zip: '10001',\r\n      country: 'USA'\r\n    },\r\n    created_at: '2024-01-15T10:30:00Z',\r\n    updated_at: '2024-01-15T10:30:00Z'\r\n  }\r\n];\r\n\r\n// Mock wishlist data\r\nlet mockWishlist = [\r\n  { id: 1, product_id: 1, user_id: 1, created_at: '2024-01-01T00:00:00Z' },\r\n  { id: 2, product_id: 4, user_id: 1, created_at: '2024-01-02T00:00:00Z' }\r\n];\r\n\r\n// Mock notifications data\r\nlet mockNotifications = [\r\n  {\r\n    id: 1,\r\n    user_id: 1,\r\n    title: 'Welcome to Gen Z Store!',\r\n    message: 'Thank you for joining our premium collection.',\r\n    type: 'welcome',\r\n    read: false,\r\n    created_at: '2024-01-01T00:00:00Z'\r\n  },\r\n  {\r\n    id: 2,\r\n    user_id: 1,\r\n    title: 'Order Shipped',\r\n    message: 'Your order #1 has been shipped and is on its way.',\r\n    type: 'order',\r\n    read: false,\r\n    created_at: '2024-01-16T09:00:00Z'\r\n  }\r\n];\r\n\r\n// ===========================================\r\n// MOCK PRODUCTS API\r\n// ===========================================\r\n\r\nexport const mockGetProducts = async (filters = {}) => {\r\n  let filteredProducts = [...products];\r\n  \r\n  // Apply filters\r\n  if (filters.category && filters.category !== 'all') {\r\n    filteredProducts = filteredProducts.filter(p => p.category === filters.category);\r\n  }\r\n  \r\n  if (filters.search) {\r\n    const searchTerm = filters.search.toLowerCase();\r\n    filteredProducts = filteredProducts.filter(p => \r\n      p.name.toLowerCase().includes(searchTerm) ||\r\n      p.description.toLowerCase().includes(searchTerm)\r\n    );\r\n  }\r\n  \r\n  if (filters.price_min) {\r\n    filteredProducts = filteredProducts.filter(p => p.price >= filters.price_min);\r\n  }\r\n  \r\n  if (filters.price_max) {\r\n    filteredProducts = filteredProducts.filter(p => p.price <= filters.price_max);\r\n  }\r\n  \r\n  return mockApiResponse({\r\n    products: filteredProducts,\r\n    total: filteredProducts.length,\r\n    page: 1,\r\n    limit: 20\r\n  });\r\n};\r\n\r\nexport const mockGetProductById = async (productId) => {\r\n  const product = products.find(p => p.id === parseInt(productId));\r\n  \r\n  if (!product) {\r\n    throw new Error('Product not found');\r\n  }\r\n  \r\n  return mockApiResponse(product);\r\n};\r\n\r\nexport const mockGetFeaturedProducts = async (limit = 8) => {\r\n  const featured = products.slice(0, limit);\r\n  return mockApiResponse(featured);\r\n};\r\n\r\nexport const mockGetProductReviews = async (productId) => {\r\n  const reviews = [\r\n    {\r\n      id: 1,\r\n      product_id: parseInt(productId),\r\n      user_id: 1,\r\n      rating: 5,\r\n      comment: 'Excellent product! Highly recommended.',\r\n      created_at: '2024-01-10T00:00:00Z'\r\n    },\r\n    {\r\n      id: 2,\r\n      product_id: parseInt(productId),\r\n      user_id: 2,\r\n      rating: 4,\r\n      comment: 'Good quality, fast shipping.',\r\n      created_at: '2024-01-12T00:00:00Z'\r\n    }\r\n  ];\r\n  \r\n  return mockApiResponse(reviews);\r\n};\r\n\r\nexport const mockAddProductReview = async (productId, reviewData) => {\r\n  const newReview = {\r\n    id: Date.now(),\r\n    product_id: parseInt(productId),\r\n    user_id: 1,\r\n    ...reviewData,\r\n    created_at: new Date().toISOString()\r\n  };\r\n  \r\n  return mockApiResponse(newReview);\r\n};\r\n\r\n// ===========================================\r\n// MOCK CART API\r\n// ===========================================\r\n\r\nexport const mockGetCart = async () => {\r\n  return mockApiResponse(mockCart);\r\n};\r\n\r\nexport const mockAddToCart = async (itemData) => {\r\n  const existingItem = mockCart.items.find(item => item.product_id === itemData.product_id);\r\n  \r\n  if (existingItem) {\r\n    existingItem.quantity += itemData.quantity || 1;\r\n  } else {\r\n    const product = products.find(p => p.id === itemData.product_id);\r\n    mockCart.items.push({\r\n      id: Date.now(),\r\n      product_id: itemData.product_id,\r\n      quantity: itemData.quantity || 1,\r\n      price: itemData.price || product?.price || 0,\r\n      name: product?.name || 'Unknown Product'\r\n    });\r\n  }\r\n  \r\n  // Update totals\r\n  mockCart.item_count = mockCart.items.reduce((sum, item) => sum + item.quantity, 0);\r\n  mockCart.total = mockCart.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n  \r\n  return mockApiResponse(mockCart);\r\n};\r\n\r\nexport const mockUpdateCartItem = async (itemId, quantity) => {\r\n  const item = mockCart.items.find(item => item.id === parseInt(itemId));\r\n  \r\n  if (!item) {\r\n    throw new Error('Cart item not found');\r\n  }\r\n  \r\n  item.quantity = quantity;\r\n  \r\n  // Update totals\r\n  mockCart.item_count = mockCart.items.reduce((sum, item) => sum + item.quantity, 0);\r\n  mockCart.total = mockCart.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n  \r\n  return mockApiResponse(mockCart);\r\n};\r\n\r\nexport const mockRemoveFromCart = async (itemId) => {\r\n  mockCart.items = mockCart.items.filter(item => item.id !== parseInt(itemId));\r\n  \r\n  // Update totals\r\n  mockCart.item_count = mockCart.items.reduce((sum, item) => sum + item.quantity, 0);\r\n  mockCart.total = mockCart.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);\r\n  \r\n  return mockApiResponse(mockCart);\r\n};\r\n\r\nexport const mockClearCart = async () => {\r\n  mockCart = { items: [], total: 0, item_count: 0 };\r\n  return mockApiResponse(mockCart);\r\n};\r\n\r\n// ===========================================\r\n// MOCK AUTH API\r\n// ===========================================\r\n\r\nexport const mockLoginUser = async (credentials) => {\r\n  const user = mockUsers.find(u => u.email === credentials.email);\r\n  \r\n  if (!user || credentials.password !== 'password') {\r\n    throw new Error('Invalid credentials');\r\n  }\r\n  \r\n  const token = 'mock-jwt-token-' + Date.now();\r\n  \r\n  return mockApiResponse({\r\n    user,\r\n    token,\r\n    expires_in: 86400\r\n  });\r\n};\r\n\r\nexport const mockRegisterUser = async (userData) => {\r\n  const newUser = {\r\n    id: Date.now(),\r\n    ...userData,\r\n    created_at: new Date().toISOString()\r\n  };\r\n  \r\n  mockUsers.push(newUser);\r\n  \r\n  const token = 'mock-jwt-token-' + Date.now();\r\n  \r\n  return mockApiResponse({\r\n    user: newUser,\r\n    token,\r\n    expires_in: 86400\r\n  });\r\n};\r\n\r\nexport const mockLogoutUser = async () => {\r\n  return mockApiResponse({ message: 'Logged out successfully' });\r\n};\r\n\r\nexport const mockGetCurrentUser = async () => {\r\n  return mockApiResponse(mockUsers[0]);\r\n};\r\n\r\nexport const mockUpdateUserProfile = async (profileData) => {\r\n  const updatedUser = { ...mockUsers[0], ...profileData };\r\n  mockUsers[0] = updatedUser;\r\n  \r\n  return mockApiResponse(updatedUser);\r\n};\r\n\r\nexport const mockChangePassword = async (passwordData) => {\r\n  return mockApiResponse({ message: 'Password changed successfully' });\r\n};\r\n\r\n// ===========================================\r\n// MOCK ORDERS API\r\n// ===========================================\r\n\r\nexport const mockGetOrders = async (filters = {}) => {\r\n  let filteredOrders = [...mockOrders];\r\n  \r\n  if (filters.status) {\r\n    filteredOrders = filteredOrders.filter(order => order.status === filters.status);\r\n  }\r\n  \r\n  return mockApiResponse(filteredOrders);\r\n};\r\n\r\nexport const mockGetOrderById = async (orderId) => {\r\n  const order = mockOrders.find(o => o.id === parseInt(orderId));\r\n  \r\n  if (!order) {\r\n    throw new Error('Order not found');\r\n  }\r\n  \r\n  return mockApiResponse(order);\r\n};\r\n\r\nexport const mockCreateOrder = async (orderData) => {\r\n  const newOrder = {\r\n    id: Date.now(),\r\n    user_id: 1,\r\n    status: 'pending',\r\n    ...orderData,\r\n    created_at: new Date().toISOString(),\r\n    updated_at: new Date().toISOString()\r\n  };\r\n  \r\n  mockOrders.push(newOrder);\r\n  \r\n  // Clear cart after order creation\r\n  mockCart = { items: [], total: 0, item_count: 0 };\r\n  \r\n  return mockApiResponse(newOrder);\r\n};\r\n\r\nexport const mockUpdateOrderStatus = async (orderId, status) => {\r\n  const order = mockOrders.find(o => o.id === parseInt(orderId));\r\n  \r\n  if (!order) {\r\n    throw new Error('Order not found');\r\n  }\r\n  \r\n  order.status = status;\r\n  order.updated_at = new Date().toISOString();\r\n  \r\n  return mockApiResponse(order);\r\n};\r\n\r\n// ===========================================\r\n// MOCK WISHLIST API\r\n// ===========================================\r\n\r\nexport const mockGetWishlist = async () => {\r\n  const wishlistItems = mockWishlist.map(item => {\r\n    const product = products.find(p => p.id === item.product_id);\r\n    return {\r\n      ...item,\r\n      product: product || null\r\n    };\r\n  });\r\n  \r\n  return mockApiResponse(wishlistItems);\r\n};\r\n\r\nexport const mockAddToWishlist = async (productId) => {\r\n  const existingItem = mockWishlist.find(item => item.product_id === parseInt(productId));\r\n  \r\n  if (existingItem) {\r\n    return mockApiResponse(existingItem);\r\n  }\r\n  \r\n  const newItem = {\r\n    id: Date.now(),\r\n    product_id: parseInt(productId),\r\n    user_id: 1,\r\n    created_at: new Date().toISOString()\r\n  };\r\n  \r\n  mockWishlist.push(newItem);\r\n  \r\n  return mockApiResponse(newItem);\r\n};\r\n\r\nexport const mockRemoveFromWishlist = async (productId) => {\r\n  mockWishlist = mockWishlist.filter(item => item.product_id !== parseInt(productId));\r\n  \r\n  return mockApiResponse({ message: 'Item removed from wishlist' });\r\n};\r\n\r\n// ===========================================\r\n// MOCK NOTIFICATIONS API\r\n// ===========================================\r\n\r\nexport const mockGetNotifications = async (filters = {}) => {\r\n  let filteredNotifications = [...mockNotifications];\r\n  \r\n  if (filters.unread_only) {\r\n    filteredNotifications = filteredNotifications.filter(n => !n.read);\r\n  }\r\n  \r\n  return mockApiResponse(filteredNotifications);\r\n};\r\n\r\nexport const mockMarkNotificationAsRead = async (notificationId) => {\r\n  const notification = mockNotifications.find(n => n.id === parseInt(notificationId));\r\n  \r\n  if (notification) {\r\n    notification.read = true;\r\n  }\r\n  \r\n  return mockApiResponse(notification);\r\n};\r\n\r\nexport const mockMarkAllNotificationsAsRead = async () => {\r\n  mockNotifications.forEach(notification => {\r\n    notification.read = true;\r\n  });\r\n  \r\n  return mockApiResponse({ message: 'All notifications marked as read' });\r\n};\r\n\r\n// ===========================================\r\n// MOCK PAYMENTS API\r\n// ===========================================\r\n\r\nexport const mockProcessPayment = async (paymentData) => {\r\n  const paymentResult = {\r\n    id: 'mock-payment-' + Date.now(),\r\n    status: 'succeeded',\r\n    amount: paymentData.amount,\r\n    currency: 'USD',\r\n    payment_method: paymentData.payment_method,\r\n    created_at: new Date().toISOString()\r\n  };\r\n  \r\n  return mockApiResponse(paymentResult);\r\n};\r\n\r\nexport const mockGetPaymentMethods = async () => {\r\n  const methods = [\r\n    { id: 'card', name: 'Credit Card', type: 'card' },\r\n    { id: 'paypal', name: 'PayPal', type: 'paypal' },\r\n    { id: 'apple_pay', name: 'Apple Pay', type: 'wallet' }\r\n  ];\r\n  \r\n  return mockApiResponse(methods);\r\n};\r\n\r\nexport const mockGetPaymentHistory = async (filters = {}) => {\r\n  const payments = [\r\n    {\r\n      id: 'mock-payment-1',\r\n      amount: 95,\r\n      currency: 'USD',\r\n      status: 'succeeded',\r\n      payment_method: 'card',\r\n      created_at: '2024-01-15T10:30:00Z'\r\n    }\r\n  ];\r\n  \r\n  return mockApiResponse(payments);\r\n};\r\n\r\n// ===========================================\r\n// MOCK ANALYTICS API\r\n// ===========================================\r\n\r\nexport const mockGetProductAnalytics = async (filters = {}) => {\r\n  const analytics = {\r\n    total_products: products.length,\r\n    total_views: 1250,\r\n    total_sales: 45,\r\n    revenue: 12500,\r\n    top_products: products.slice(0, 5).map(p => ({\r\n      id: p.id,\r\n      name: p.name,\r\n      views: Math.floor(Math.random() * 100),\r\n      sales: Math.floor(Math.random() * 20)\r\n    }))\r\n  };\r\n  \r\n  return mockApiResponse(analytics);\r\n};\r\n\r\nexport const mockGetSalesStatistics = async (filters = {}) => {\r\n  const statistics = {\r\n    total_orders: mockOrders.length,\r\n    total_revenue: mockOrders.reduce((sum, order) => sum + order.total, 0),\r\n    average_order_value: mockOrders.reduce((sum, order) => sum + order.total, 0) / mockOrders.length,\r\n    orders_by_status: {\r\n      pending: mockOrders.filter(o => o.status === 'pending').length,\r\n      completed: mockOrders.filter(o => o.status === 'completed').length,\r\n      cancelled: mockOrders.filter(o => o.status === 'cancelled').length\r\n    }\r\n  };\r\n  \r\n  return mockApiResponse(statistics);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}