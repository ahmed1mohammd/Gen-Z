{"ast":null,"code":"// Mock Mode Configuration\n// This file controls whether to use mock data or API calls\n\n// Set to true to use mock data, false to use API calls\nexport const USE_MOCK_DATA = true;\n\n// Mock data configuration\nexport const MOCK_CONFIG = {\n  // Simulate API delay (in milliseconds)\n  API_DELAY: 500,\n  // Simulate loading states\n  ENABLE_LOADING_STATES: true,\n  // Simulate errors (for testing)\n  SIMULATE_ERRORS: false,\n  ERROR_RATE: 0.1 // 10% chance of error\n};\n\n// Helper function to simulate API delay\nexport const simulateApiDelay = (ms = MOCK_CONFIG.API_DELAY) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\n// Helper function to simulate random errors\nexport const shouldSimulateError = () => {\n  if (!MOCK_CONFIG.SIMULATE_ERRORS) return false;\n  return Math.random() < MOCK_CONFIG.ERROR_RATE;\n};\n\n// Mock API response wrapper\nexport const mockApiResponse = async (data, options = {}) => {\n  const {\n    delay = MOCK_CONFIG.API_DELAY,\n    shouldError = false\n  } = options;\n  await simulateApiDelay(delay);\n  if (shouldError || shouldSimulateError()) {\n    throw new Error('Mock API Error: Simulated error for testing');\n  }\n  return data;\n};\n\n// Environment-based mock mode\nexport const getMockMode = () => {\n  // Check environment variable first\n  if (process.env.REACT_APP_USE_MOCK_DATA !== undefined) {\n    return process.env.REACT_APP_USE_MOCK_DATA === 'true';\n  }\n\n  // Fallback to configuration\n  return USE_MOCK_DATA;\n};\n\n// Check if we should use mock data\nexport const isMockMode = () => {\n  return getMockMode();\n};","map":{"version":3,"names":["USE_MOCK_DATA","MOCK_CONFIG","API_DELAY","ENABLE_LOADING_STATES","SIMULATE_ERRORS","ERROR_RATE","simulateApiDelay","ms","Promise","resolve","setTimeout","shouldSimulateError","Math","random","mockApiResponse","data","options","delay","shouldError","Error","getMockMode","process","env","REACT_APP_USE_MOCK_DATA","undefined","isMockMode"],"sources":["C:/Users/asus/OneDrive/Desktop/Gen z/src/config/mockMode.js"],"sourcesContent":["// Mock Mode Configuration\r\n// This file controls whether to use mock data or API calls\r\n\r\n// Set to true to use mock data, false to use API calls\r\nexport const USE_MOCK_DATA = true;\r\n\r\n// Mock data configuration\r\nexport const MOCK_CONFIG = {\r\n  // Simulate API delay (in milliseconds)\r\n  API_DELAY: 500,\r\n  \r\n  // Simulate loading states\r\n  ENABLE_LOADING_STATES: true,\r\n  \r\n  // Simulate errors (for testing)\r\n  SIMULATE_ERRORS: false,\r\n  ERROR_RATE: 0.1, // 10% chance of error\r\n};\r\n\r\n// Helper function to simulate API delay\r\nexport const simulateApiDelay = (ms = MOCK_CONFIG.API_DELAY) => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\n// Helper function to simulate random errors\r\nexport const shouldSimulateError = () => {\r\n  if (!MOCK_CONFIG.SIMULATE_ERRORS) return false;\r\n  return Math.random() < MOCK_CONFIG.ERROR_RATE;\r\n};\r\n\r\n// Mock API response wrapper\r\nexport const mockApiResponse = async (data, options = {}) => {\r\n  const { delay = MOCK_CONFIG.API_DELAY, shouldError = false } = options;\r\n  \r\n  await simulateApiDelay(delay);\r\n  \r\n  if (shouldError || shouldSimulateError()) {\r\n    throw new Error('Mock API Error: Simulated error for testing');\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// Environment-based mock mode\r\nexport const getMockMode = () => {\r\n  // Check environment variable first\r\n  if (process.env.REACT_APP_USE_MOCK_DATA !== undefined) {\r\n    return process.env.REACT_APP_USE_MOCK_DATA === 'true';\r\n  }\r\n  \r\n  // Fallback to configuration\r\n  return USE_MOCK_DATA;\r\n};\r\n\r\n// Check if we should use mock data\r\nexport const isMockMode = () => {\r\n  return getMockMode();\r\n};\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA,OAAO,MAAMA,aAAa,GAAG,IAAI;;AAEjC;AACA,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,SAAS,EAAE,GAAG;EAEd;EACAC,qBAAqB,EAAE,IAAI;EAE3B;EACAC,eAAe,EAAE,KAAK;EACtBC,UAAU,EAAE,GAAG,CAAE;AACnB,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,EAAE,GAAGN,WAAW,CAACC,SAAS,KAAK;EAC9D,OAAO,IAAIM,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AACxD,CAAC;;AAED;AACA,OAAO,MAAMI,mBAAmB,GAAGA,CAAA,KAAM;EACvC,IAAI,CAACV,WAAW,CAACG,eAAe,EAAE,OAAO,KAAK;EAC9C,OAAOQ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGZ,WAAW,CAACI,UAAU;AAC/C,CAAC;;AAED;AACA,OAAO,MAAMS,eAAe,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC3D,MAAM;IAAEC,KAAK,GAAGhB,WAAW,CAACC,SAAS;IAAEgB,WAAW,GAAG;EAAM,CAAC,GAAGF,OAAO;EAEtE,MAAMV,gBAAgB,CAACW,KAAK,CAAC;EAE7B,IAAIC,WAAW,IAAIP,mBAAmB,CAAC,CAAC,EAAE;IACxC,MAAM,IAAIQ,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,OAAOJ,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMK,WAAW,GAAGA,CAAA,KAAM;EAC/B;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,uBAAuB,KAAKC,SAAS,EAAE;IACrD,OAAOH,OAAO,CAACC,GAAG,CAACC,uBAAuB,KAAK,MAAM;EACvD;;EAEA;EACA,OAAOvB,aAAa;AACtB,CAAC;;AAED;AACA,OAAO,MAAMyB,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAOL,WAAW,CAAC,CAAC;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}